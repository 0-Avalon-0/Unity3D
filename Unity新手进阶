7.23：

在使用Unity开发MMORPG,MMOARPG（大型页游）客户端时，50%以上工作量是在写UI界面和UI界面的逻辑。

插件
1. NGUI：
使用最多的第三方UI插件。

2. UGUI:
Unity 自带的。

3. OnGui:
用于扩展Unity引擎界面。

4. Legacy GUi：
只能实现稍实用但是能用的UI。

GUI Text组件：主要用于文字显示。
创建方法：
新建一个空物体，添加Rendering -> GUI Text组件即可。
文字大小默认为0，单位是像素（为 0 会看不到）。

Pixel offset像素偏移量：设置x / y值设置文本在场景中显示的位置。

注意 ！！
主摄像机没有GUI layer控件会无法显示文本。


GUItexture：用于图片的显示。
首先创建空物体，然后同样在Rendering中选择组件搭载。
使用：
首先将Transform中Scale改为0.1，之后再设置相关属性。

Texture属性:设置要显示的图片。
Color属性：设置图片颜色，默认状态下不影响图片显示效果，只影响色调。（灰色不会影响，默认为灰色）

Pixel Inset像素设置：
X / Y 设置图片显示位置。
W / H 设置图片宽高。


鼠标事件：
之前所用的 Input类下的鼠标输入是全局的，只能获取鼠标的按键状态。

此处的是挂载在一个物体上，只当操作该物体时才生效。

常用事件方法：
OnMouseEnter():
OnMouseExit():
OnMouseDown():鼠标按下，即单击。

颜色参数：Color结构体，Color.red,...



特效组件 
TrailRenderer拖尾渲染器:用于渲染显示“拖尾特效”

特效应用：用于高速运动物体，炮弹、子弹等。

！！体现物体运动速度。

创建：新建一个空物体，添加TraiRenderer组件 Effects -> Trail Renderer

在Scene移动该空物体就可以看到效果。

TrailRenderer -> Materials 材质球使用：使用材质渲染拖尾。
注意Element属性

若没有赋值材质球，默认是粉红色的。


制作透明材质球：
创建，设置Shader为Particles -> Additive
最后赋予Texture。

常用属性：Time：拖尾持续时间。
Start Width：开始宽度。
End Width：结束宽度。
Color：
实际开发中，美工给的图往往是黑白图，黑色是透明区，白色不透明。
可以通过手动改Color，让白色区域显示特定颜色。


LineRenderer：
线渲染器，渲染显示线特效。
应用：激光效果，子弹瞄准。

常用属性：
Positions：开始，结束位置。Size为2说明是2个结点。





7.24：
声音组件AudioSource：
用于播放AudioClip资源。

使用时同样创建一个空物体（可选），添加AudioSource组件。
属性：
Audio Clip： 资源
PlayOnAwake：唤醒时播放，游戏一运行就播放。
Loop：
Mute：静音。
Volume：0~1
Spatial Blend：空间混合。为0是2D，任何位置听的都一样。为1是3D，根据摄像机与音频源距离有关。
做2D 或是 3D游戏时要注意。

Audio Listener：声音侦听器。默认挂载在摄像机上，作为“耳朵”。

Audio Source常用函数：
Play / Stop / Pause
Stop和Pause区别在于点击以后重新再play，stop是从头开始播放，Pause是接着刚刚的地方播放。


实例化游戏物体：
GameObject.Instantiate(Object,Vector3,Quaternion)
参数分别为：预制体，目标生成位置，旋转状态（四元数）。
Quaternion.identity：无旋转。

脚本内变量定义为Public即可引用外部物体。（拖拽即可）

构造随机位置：
Random.Range(min,max)：生成随机数。


销毁游戏物体：
Game Object.Destroy(Object,float) 定时销毁某物体。
float参数：时间。


Invoke函数：归属于MonoBehaviour类

Invoke(string,float)：多少秒后执行某个函数。
string:要执行的函数名
float:时间

InvokeRepeating(string,float,float):多少秒（第二个）后执行，每隔多少秒（第三个）后再执行

CancelInvoke():取消 所有 Invoke调用。


消息发送：
gameObject.SendMessage(String)：通知 该游戏体上 脚本文件中指定方法执行
String是方法名，要执行的方法的名称。

注意，private方法无法执行！！

或者可以通过ganmeObject.GetComponent<脚本名>.函数名来实现




7.25：
协同程序Coroutine：
在脚本y运行过程中，需要执行一些其他的代码，遇到条件会挂起。
类似于开线程，但不是。
区别在于：任何时刻只有一个系统程序运行，与多线程程序不一样（多个线程同时）。

使用前提：必须继承MonoBehaviour
e.g.:
IEnumerator Task()
{yield return new WaitForSeconds(2);
Debug.Log();
}

IEnumerator:返回值类型，协同程序固定写法
yield return:返回

调用协同程序：
StartCoroutine("协同程序方法名")(e.g.:"Task3")

停止：
Stop Coroutine("协同程序方法名")(e.g.:"Task3")

同一个协同程序可以 yield return 多个值。




7.26：
生命周期
脚本生命周期即挂载的物体生命周期
生命周期事件 是一些特定的方法
全部定义在MonoBehaviour 类中

生命周期图片！！重要！！

Editor -> Initialization -> Physices -> Input -> Game Logic (Update / yield) -> Rendering -> End of game
-> Pausing -> Disable -> Decomposing

Instantiate出来的是 Object 类型

父类无法赋值给子类  多态！！

所以实例化出来的类型 需要 as GameObject 才能赋值给 GameObject


按照使用顺序:
1.Awake():唤醒事件，只执行一次。
2.OnEnable():启用事件，只执行一次，当脚本组件被启用时执行一次，即勾选脚本组件前的方框。
3.Start()
前三个常用于初始化。

4.FixedUpdate():固定更新，0.02秒一次。所有物理组件相关更新都在此调用。
5.Update()
6.LateUpdate():稍后更新，在Update之后执行。
7.OnGUI():渲染事件
8.OnDisable():禁用事件，执行一次，在OnDestroy之前执行，当脚本组件被启用时执行一次，即勾选脚本组件前的方框。
9.OnDestroy():销毁事件，执行一次。





7.27：
常用API
工具类：
1. Screen 屏幕类：
Screen.width:静态只读，屏幕宽度。
Screen.height:静态只读，屏幕高度。

在Unity开发下，这两个值取的是Game窗口的宽度和高度（缩放窗口 值就改变）
编译打包后运行，是具体设备的宽度和高度。

2.Time时间类：
Time.time:静态只读，从游戏开始到现在经过的时间（秒数）。

Time.deltaTime:静态只读，时间增量。渲染完上一帧画面消耗的时间。
（可用于实现倒计时）

Time.timeScale:静态可读写。时间缩放程度，可用于暂停游戏。
当值为1时，游戏正常。为0时，游戏暂停。为0.5时，游戏处于慢放0.5倍状态。



3.Mathf数学类：
Mathf是一个结构体类型，包含各种数学运算函数。
Mathf.Abs()
Mathf.Round():四舍五入 Mathf.Round(0.6f) -> 1

插值运算函数：
Mathf.Lerp(float a,float b,float f)
基于t，返回a到b之间的插值，t限制在0-1之间。
就是按比例返回，例如a=2.0,b=5.0,f=0.3,返回2.9 (2+(5-2)*0.3)

一个数从0插值到10
num = Mathf.Lerp(num,10,Time.deltaTime)

插值运算的目的基本都是为了  ”平滑过渡“


物理射线后期使用频率极高！！


物理射线之原理分析：
物理射线可以与游戏中其他物体的Collider碰撞，碰撞即结束。

通过摄像机创建射线。

Camera.main: 代表tag设置为Main Camera的摄像机的 Camera组件的引用。
（解释：camera名称为Main camera，其下的组件有一个叫Camera）

摄像机组件(对象)下的一个方法：
m_Camera.ScreenPointToRay(Vector3)
屏幕点转化为射线，该方法返回一个Ray类型的射线。

点通常写鼠标的点击位置，这样就代表从摄像机向点的位置发出一个射线。

Input.mousePosition:鼠标所在的位置值。

Ray 射线，一个结构体。


检查射线与其他物体的碰撞：
RaycastHit 结构体，用于存储射线的碰撞信息。

Physics.Raycast(Ray,out RaycastHit)静态方法，射线检查。
该方法返回值为bool类型
如果与场景中物理组件相碰撞，返回值为真，并将信息存储在RaycastHit类型的变量中。

out关键字与ref关键字类似，都是引用中从方法内接收值。
区别在于ref关键字必须初始化，out形参不需要。


tip:方法前加注释，三条斜杠

总结，三个步骤：
1. 摄像机建立射线
2. 检查射线碰撞，得到碰撞信息
3. 根据信息处理



7.28：
射线打砖块案例：

射线碰撞检测发射子弹：
RaycastHit.point:获取射线碰撞点。

Vector3向量计算方向：
方向是矢量，也是Vector3类型的，由末位置减去初位置得到。















